#!/bin/bash

# 🏗️ BUILDER-AI SETUP SCRIPT
# ============================
# Purpose: Complete setup script for Builder-AI system
# Usage: bash setup-builder-ai.sh
# Requirements: Node.js 18+, npm, git

set -e  # Exit on any error

echo "🏗️ BUILDER-AI SETUP STARTING"
echo "============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️ $1${NC}"
}

# Check prerequisites
echo ""
echo "🔍 CHECKING PREREQUISITES"
echo "========================="

# Check Node.js version
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_status "Node.js found: $NODE_VERSION"
else
    print_error "Node.js not found. Please install Node.js 18+ from https://nodejs.org/"
    exit 1
fi

# Check npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_status "npm found: $NPM_VERSION"
else
    print_error "npm not found. Please install npm."
    exit 1
fi

# Check git
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version)
    print_status "git found: $GIT_VERSION"
else
    print_error "git not found. Please install git."
    exit 1
fi

# Ensure we're in the correct directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "$SCRIPT_DIR"

print_info "Working directory: $SCRIPT_DIR"

# Install dependencies
echo ""
echo "📦 INSTALLING DEPENDENCIES"
echo "=========================="

print_info "Installing npm dependencies..."
npm install

print_status "Dependencies installed successfully"

# Create .env file if it doesn't exist
echo ""
echo "⚙️ ENVIRONMENT CONFIGURATION"
echo "============================"

if [ ! -f ".env" ]; then
    print_info "Creating .env file..."
    
    cat > .env << 'EOF'
# 🏗️ BUILDER-AI ENVIRONMENT CONFIGURATION
# ========================================
# Generated by setup script
# Please update with your actual values

# Core Service Configuration
NODE_ENV=development
PORT=8082

# Claude API Configuration (REQUIRED)
# Get your API key from: https://console.anthropic.com/
CLAUDE_API_KEY_1=sk-ant-api03-YOUR_CLAUDE_API_KEY_HERE

# Additional Claude API Keys (Optional - for rate limiting)
# CLAUDE_API_KEY_2=sk-ant-api03-YOUR_SECOND_KEY_HERE
# CLAUDE_API_KEY_3=sk-ant-api03-YOUR_THIRD_KEY_HERE

# GitHub Configuration (REQUIRED)
# Generate token at: https://github.com/settings/tokens
GITHUB_TOKEN=github_pat_YOUR_GITHUB_TOKEN_HERE

# Telegram Configuration (Optional - for notifications)
# Create bot with @BotFather on Telegram
TELEGRAM_BOT_TOKEN=YOUR_TELEGRAM_BOT_TOKEN_HERE
TELEGRAM_ALLOWED_CHAT_ID=YOUR_CHAT_ID_HERE

# Contract Test Paths (Auto-detected)
ENTRYGATE_TEST_PATH=/home/admin1800/1800-lottery-v4-thirdweb/tests/EntryGateFinal
ENTRYGATE_CONTRACT_PATH=/home/admin1800/1800-lottery-v4-thirdweb/tests/EntryGateFinal/EntryGateFinal.sol
ENTRYGATE_TESTSUITE_PATH=/home/admin1800/1800-lottery-v4-thirdweb/tests/EntryGateFinal/EntryGateFinal-Complete-TestSuite.js

# Logging Configuration
LOG_LEVEL=info

# Testing Configuration
AUTO_FIX_ENABLED=true
TEST_BATCH_SIZE=50
MAX_CONCURRENT_TESTS=5
TEST_TIMEOUT=300000

# Rate Limiting
CLAUDE_RATE_LIMIT_REQUESTS_PER_MINUTE=100
CLAUDE_RATE_LIMIT_TOKENS_PER_MINUTE=40000
EOF

    print_status ".env file created"
    print_warning "Please edit .env file with your actual API keys and tokens"
else
    print_status ".env file already exists"
fi

# Build TypeScript
echo ""
echo "🔨 BUILDING TYPESCRIPT"
echo "====================="

print_info "Compiling TypeScript..."
npm run build

if [ $? -eq 0 ]; then
    print_status "TypeScript compilation successful"
else
    print_error "TypeScript compilation failed"
    exit 1
fi

# Setup test directories
echo ""
echo "🧪 SETTING UP TEST INFRASTRUCTURE"
echo "================================="

# Check if tests directory exists
TESTS_DIR="/home/admin1800/1800-lottery-v4-thirdweb/tests"
if [ -d "$TESTS_DIR" ]; then
    print_status "Tests directory found: $TESTS_DIR"
    
    # Check EntryGateFinal setup
    if [ -d "$TESTS_DIR/EntryGateFinal" ]; then
        print_status "EntryGateFinal tests found"
        
        cd "$TESTS_DIR/EntryGateFinal"
        if [ -f "package.json" ]; then
            print_info "Installing EntryGateFinal test dependencies..."
            npm install --silent
            print_status "EntryGateFinal test environment ready"
        else
            print_warning "EntryGateFinal package.json not found"
        fi
        cd "$SCRIPT_DIR"
    else
        print_warning "EntryGateFinal tests not found at $TESTS_DIR/EntryGateFinal"
    fi
else
    print_warning "Tests directory not found at $TESTS_DIR"
fi

# Kill any existing processes on port 8082
echo ""
echo "🔧 PORT CLEANUP"
echo "==============="

print_info "Checking for processes on port 8082..."
if lsof -ti:8082 >/dev/null 2>&1; then
    print_warning "Found process on port 8082, attempting to kill..."
    sudo lsof -ti:8082 | xargs sudo kill -9 2>/dev/null || true
    sleep 2
    print_status "Port 8082 cleaned up"
else
    print_status "Port 8082 is available"
fi

# Test the build
echo ""
echo "🧪 TESTING BUILD"
echo "==============="

print_info "Testing server startup..."

# Start server in background for test
timeout 10s npm start &
SERVER_PID=$!

sleep 5

# Test health endpoint
if curl -s http://localhost:8082/health >/dev/null 2>&1; then
    print_status "Server started successfully and health check passed"
else
    print_warning "Health check failed or server didn't start properly"
fi

# Kill test server
kill $SERVER_PID 2>/dev/null || true
sleep 2

# Final status
echo ""
echo "🎉 SETUP COMPLETE"
echo "================="

print_status "Builder-AI setup completed successfully!"
echo ""
print_info "Next steps:"
echo "1. Edit .env file with your actual API keys"
echo "2. Start the server: npm start"
echo "3. Test health endpoint: curl http://localhost:8082/health"
echo "4. Deploy to Railway (see documentation)"
echo ""
print_info "Documentation: BUILDER-AI-COMPLETE-DOCUMENTATION.md"
echo ""

# Check for missing configuration
echo "📋 CONFIGURATION CHECKLIST"
echo "=========================="

if grep -q "YOUR_CLAUDE_API_KEY_HERE" .env; then
    print_warning "Claude API key needs to be configured in .env"
else
    print_status "Claude API key configured"
fi

if grep -q "YOUR_GITHUB_TOKEN_HERE" .env; then
    print_warning "GitHub token needs to be configured in .env"
else
    print_status "GitHub token configured"
fi

if grep -q "YOUR_TELEGRAM_BOT_TOKEN_HERE" .env; then
    print_warning "Telegram bot token needs to be configured in .env (optional)"
else
    print_status "Telegram bot token configured"
fi

echo ""
print_info "Setup script completed! Builder-AI is ready for use."
print_info "Run 'npm start' to start the Builder-AI server."

